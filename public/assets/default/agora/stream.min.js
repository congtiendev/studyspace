/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!********************************************!*\
  !*** ./resources/js/parts/agora/stream.js ***!
  \********************************************/
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
(function ($) {
  "use strict";

  var liveEndedHtml = "<div class=\"no-result default-no-result d-flex align-items-center justify-content-center flex-column w-100 h-100\">\n        <div class=\"no-result-logo\">\n            <img src=\"/assets/default/img/no-results/support.png\" alt=\"\">\n        </div>\n        <div class=\"d-flex align-items-center flex-column mt-30 text-center\">\n            <h2 class=\"text-dark-blue\">".concat(liveEndedLang, "</h2>\n            <p class=\"mt-5 text-center text-gray font-weight-500\">").concat(redirectToPanelInAFewMomentLang, "</p>\n        </div>\n    </div>");
  var featherIconsConf = {
    width: 20,
    height: 20
  };
  var maximizeIcon = feather.icons['maximize-2'].toSvg(featherIconsConf);

  // create Agora client
  var client = AgoraRTC.createClient({
    mode: "live",
    codec: "vp8"
  });
  var localTracks = {
    videoTrack: null,
    audioTrack: null,
    screenAudioTrack: null,
    screenVideoTrack: null,
    shareScreenActived: false
  };
  var remoteUsers = {};

  // Agora client options
  var options = {
    appid: appId,
    channel: channelName,
    uid: null,
    token: rtcToken,
    role: 'host',
    //streamRole, // host or audience
    audienceLatency: 2
  };
  var $remoteStreamPlayerEl = $('#remote-stream-player');
  var $shareScreenButton = $('#shareScreen');
  function handleJoinOrCreateStream() {
    return _handleJoinOrCreateStream.apply(this, arguments);
  }
  function _handleJoinOrCreateStream() {
    _handleJoinOrCreateStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var playerHtml, player, startAt;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            if (streamRole === "audience") {
              client.on("user-published", handleUserPublished);
              client.on("user-unpublished", handleUserUnpublished);
              client.on("user-left", handleHostEndLive);
              client.on("user-joined", handlePeerOnline);
            }
            client.setClientRole(options.role);

            // join the channel
            _context.next = 5;
            return client.join(options.appid, options.channel, options.token || null, authUserId);
          case 5:
            options.uid = _context.sent;
            if (!(streamRole === "host" || sessionStreamType === 'multiple')) {
              _context.next = 30;
              break;
            }
            _context.next = 9;
            return AgoraRTC.createMicrophoneAudioTrack();
          case 9:
            localTracks.audioTrack = _context.sent;
            _context.next = 12;
            return AgoraRTC.createCameraVideoTrack();
          case 12:
            localTracks.videoTrack = _context.sent;
            if (!(streamRole === "audience")) {
              _context.next = 22;
              break;
            }
            _context.next = 16;
            return getRemoteUserCardHtml(authUserId);
          case 16:
            playerHtml = _context.sent;
            player = $(playerHtml);
            $remoteStreamPlayerEl.append(player);
            localTracks.videoTrack.play("remote-player-".concat(authUserId));
            _context.next = 23;
            break;
          case 22:
            localTracks.videoTrack.play("stream-player");
          case 23:
            _context.next = 25;
            return client.publish([localTracks.videoTrack, localTracks.audioTrack]);
          case 25:
            if (streamRole === "host") {
              client.on("user-published", handleUserPublished);
              client.on("user-unpublished", handleUserUnpublished);
              client.on("user-joined", handlePeerOnline);
              client.on("user-left", handleAudienceLeft);
            }
            startAt = streamStartAt && streamStartAt > 0 ? new Date().getTime() / 1000 - streamStartAt : 0;
            handleTimer(startAt);
            console.log("publish success");
            $(".agora-stream-loading").addClass('d-none');
          case 30:
            _context.next = 35;
            break;
          case 32:
            _context.prev = 32;
            _context.t0 = _context["catch"](0);
            console.error(_context.t0);
          case 35:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 32]]);
    }));
    return _handleJoinOrCreateStream.apply(this, arguments);
  }
  handleJoinOrCreateStream();
  function handlePeerOnline(evt) {
    /*onsole.log('#################### Online')
    console.log(evt)*/
  }
  window.getUserInfoCache = {};
  window.getUserInfo = function (uid) {
    return new Promise(function (resolve, reject) {
      if (getUserInfoCache && typeof getUserInfoCache[uid] !== "undefined") {
        resolve(getUserInfoCache[uid]);
      } else {
        $.get("/panel/users/".concat(uid, "/getInfo"), function (result) {
          if (result && result.user) {
            getUserInfoCache[uid] = result.user;
            resolve(result.user);
          } else {
            reject(null);
          }
        });
      }
    });
  };
  function subscribe(_x, _x2) {
    return _subscribe.apply(this, arguments);
  }
  function _subscribe() {
    _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(user, mediaType) {
      var uid, playerHtml, player, startAt;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            uid = user.uid; // subscribe to a remote user
            _context2.next = 3;
            return client.subscribe(user, mediaType);
          case 3:
            console.log("subscribe success");
            if (!(mediaType === 'video')) {
              _context2.next = 15;
              break;
            }
            if (!(uid === hostUserId)) {
              _context2.next = 9;
              break;
            }
            user.videoTrack.play("stream-player");
            _context2.next = 15;
            break;
          case 9:
            _context2.next = 11;
            return getRemoteUserCardHtml(uid);
          case 11:
            playerHtml = _context2.sent;
            player = $(playerHtml);
            $remoteStreamPlayerEl.append(player);
            user.videoTrack.play("remote-player-".concat(uid));
          case 15:
            if (mediaType === 'audio') {
              user.audioTrack.play();
            }
            $(".agora-stream-loading").addClass('d-none');
            $("#notStartedAlert").removeClass('d-flex').addClass('d-none');
            startAt = streamStartAt && streamStartAt > 0 ? new Date().getTime() / 1000 - streamStartAt : 0;
            handleTimer(startAt);
          case 20:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return _subscribe.apply(this, arguments);
  }
  function leave() {
    return _leave.apply(this, arguments);
  }
  function _leave() {
    _leave = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var trackName, track;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            for (trackName in localTracks) {
              track = localTracks[trackName];
              if (track) {
                track.stop();
                track.close();
                localTracks[trackName] = undefined;
              }
            }

            // remove remote users and player views

            // leave the channel
            _context3.next = 3;
            return client.leave();
          case 3:
            if (redirectAfterLeave) {
              window.location = redirectAfterLeave;
            }
            console.log("client leaves channel success");
          case 5:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return _leave.apply(this, arguments);
  }
  function handleUserPublished(user, mediaType) {
    var id = user.uid;
    remoteUsers[id] = user;
    subscribe(user, mediaType);
  }
  function handleUserUnpublished(user, mediaType) {
    if (mediaType === 'video') {
      var id = user.uid;
      delete remoteUsers[id];
      $("#player-wrapper-".concat(id)).html('');
    }
  }
  function handleHostEndLive(user, mediaType) {
    var id = user.uid;
    $("#player-wrapper-".concat(id)).html(liveEndedHtml);
    setTimeout(function () {
      if (redirectAfterLeave) {
        window.location = redirectAfterLeave;
      }
    }, 5000);
  }
  function handleAudienceLeft(user, mediaType) {
    var id = user.uid;
    $("#remote-player-".concat(id)).remove();
  }
  function handleShareScreen() {
    return _handleShareScreen.apply(this, arguments);
  }
  function _handleShareScreen() {
    _handleShareScreen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var screenTrack, _yield$Promise$all, _yield$Promise$all2;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            if (localTracks.shareScreenActived) {
              _context4.next = 15;
              break;
            }
            _context4.next = 3;
            return Promise.all([AgoraRTC.createScreenVideoTrack({
              encoderConfig: {
                framerate: 30,
                height: 720,
                width: 1280
              }
            }, "auto")]);
          case 3:
            _yield$Promise$all = _context4.sent;
            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);
            screenTrack = _yield$Promise$all2[0];
            if (screenTrack instanceof Array) {
              localTracks.screenVideoTrack = screenTrack[0];
              localTracks.screenAudioTrack = screenTrack[1];
            } else {
              localTracks.screenVideoTrack = screenTrack;
            }

            // play local video track
            if (!localTracks.screenVideoTrack) {
              _context4.next = 15;
              break;
            }
            localTracks.screenVideoTrack.play("stream-player");
            // publish local tracks to channel
            _context4.next = 11;
            return handleCameraEffect(true);
          case 11:
            _context4.next = 13;
            return client.publish([localTracks.screenVideoTrack, localTracks.audioTrack]);
          case 13:
            localTracks.shareScreenActived = true;
            localTracks.screenVideoTrack.on("track-ended", function () {
              client.unpublish(localTracks.screenVideoTrack).then(function () {
                localTracks.screenVideoTrack.stop();
                localTracks.screenVideoTrack.close();
                localTracks.shareScreenActived = false;
                handleCameraEffect(false);
              });
            });
          case 15:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return _handleShareScreen.apply(this, arguments);
  }
  function handleEndShareScreen() {
    return _handleEndShareScreen.apply(this, arguments);
  }
  function _handleEndShareScreen() {
    _handleEndShareScreen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            if (localTracks.shareScreenActived) {
              client.unpublish(localTracks.screenVideoTrack).then(function () {
                localTracks.screenVideoTrack.stop();
                localTracks.screenVideoTrack.close();
                localTracks.shareScreenActived = false;
                handleCameraEffect(false);
              });
            }
          case 1:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    }));
    return _handleEndShareScreen.apply(this, arguments);
  }
  $('body').on('click', '#leave', function (e) {
    var $this = $(this);
    var sessionId = $this.attr('data-id');
    $this.addClass('loadingbar primary').prop('disabled', true);
    var path = '/panel/sessions/' + sessionId + '/endAgora';
    $.get(path, function (result) {
      if (result && result.code === 200) {
        leave();
      }
    });
  });
  $('body').on('click', '#shareScreen', function (e) {
    handleShareScreen();
    $(this).removeClass('d-flex').addClass('d-none');
    $('#endShareScreen').removeClass('d-none').addClass('d-flex');
  });
  $('body').on('click', '#endShareScreen', function (e) {
    handleEndShareScreen();
    $(this).removeClass('d-flex').addClass('d-none');
    $('#shareScreen').removeClass('d-none').addClass('d-flex');
  });
  $('body').on('click', '#microphoneEffect', function (e) {
    var $this = $(this);
    var icon = feather.icons['mic'].toSvg(featherIconsConf);
    if (localTracks.audioTrack) {
      if ($this.hasClass('active')) {
        $this.removeClass('active');
        $this.addClass('disabled');
        icon = feather.icons['mic-off'].toSvg(featherIconsConf);
        client.unpublish(localTracks.audioTrack);
      } else {
        $this.addClass('active');
        $this.removeClass('disabled');
        client.publish(localTracks.audioTrack);
      }
    }
    $this.find('.icon').html(icon);
  });
  $('body').on('click', '#cameraEffect', function (e) {
    var $this = $(this);
    if (!localTracks.shareScreenActived) {
      handleCameraEffect($this.hasClass('active'));
    }
  });
  function handleCameraEffect() {
    return _handleCameraEffect.apply(this, arguments);
  }
  function _handleCameraEffect() {
    _handleCameraEffect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var isActive,
        $button,
        icon,
        playerHtml,
        player,
        _args6 = arguments;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            isActive = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;
            $button = $('#cameraEffect');
            icon = feather.icons['video'].toSvg(featherIconsConf);
            if (!isActive) {
              _context6.next = 10;
              break;
            }
            $button.removeClass('active');
            $button.addClass('disabled');
            icon = feather.icons['video-off'].toSvg(featherIconsConf);
            if (localTracks.videoTrack) {
              localTracks.videoTrack.stop();
              localTracks.videoTrack.close();
              client.unpublish(localTracks.videoTrack);
            }
            _context6.next = 26;
            break;
          case 10:
            $button.addClass('active');
            $button.removeClass('disabled');
            _context6.next = 14;
            return AgoraRTC.createCameraVideoTrack();
          case 14:
            localTracks.videoTrack = _context6.sent;
            if (!(authUserId === hostUserId)) {
              _context6.next = 19;
              break;
            }
            localTracks.videoTrack.play("stream-player");
            _context6.next = 25;
            break;
          case 19:
            _context6.next = 21;
            return getRemoteUserCardHtml(authUserId);
          case 21:
            playerHtml = _context6.sent;
            player = $(playerHtml);
            $remoteStreamPlayerEl.append(player);
            localTracks.videoTrack.play("remote-player-".concat(authUserId));
          case 25:
            client.publish(localTracks.videoTrack);
          case 26:
            $button.find('.icon').html(icon);
          case 27:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    }));
    return _handleCameraEffect.apply(this, arguments);
  }
  function getRemoteUserCardHtml(_x3) {
    return _getRemoteUserCardHtml.apply(this, arguments);
  }
  function _getRemoteUserCardHtml() {
    _getRemoteUserCardHtml = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(uid) {
      var userInfo;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return getUserInfo(uid);
          case 2:
            userInfo = _context7.sent;
            return _context7.abrupt("return", "<div id=\"remote-player-".concat(uid, "\" class=\"remote-stream\">\n                    <span class=\"remote-stream-fullscreen\">").concat(maximizeIcon, "</span>\n                    ").concat(userInfo ? "<span class=\"remote-stream-user-info\">".concat(userInfo.full_name, "</span>") : '', "\n                </div>"));
          case 4:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    }));
    return _getRemoteUserCardHtml.apply(this, arguments);
  }
  function handleTimer() {
    var startAt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var streamTimer = $('#streamTimer');
    var hoursLabel = streamTimer.find('.hours');
    var minutesLabel = streamTimer.find('.minutes');
    var secondsLabel = streamTimer.find('.seconds');
    var totalSeconds = startAt;
    setInterval(setTime, 1000);
    function setTime() {
      ++totalSeconds;
      var seconds = pad(Math.floor(totalSeconds % 60));
      var minutes = pad(Math.floor(totalSeconds / 60 % 60));
      var hours = pad(Math.floor(totalSeconds / (60 * 60) % 24));
      hoursLabel.html(hours);
      minutesLabel.html(minutes);
      secondsLabel.html(seconds);
    }
    function pad(val) {
      var valString = val + "";
      if (valString.length < 2) {
        return "0" + valString;
      } else {
        return valString;
      }
    }
  }
  $('body').on('click', '#collapseBtn', function () {
    var $tabs = $('.agora-tabs');
    $tabs.toggleClass('show');
  });
  $('body').on('click', '.remote-stream-fullscreen', function () {
    var $parent = $(this).closest('.remote-stream');
    $parent.toggleClass('is-fullscreen');
    $remoteStreamPlayerEl.toggleClass('is-fullscreen');
  });
  $('body').on('click', '#handleUsersJoin', function (e) {
    var $this = $(this);
    var notActive = $this.hasClass('dont-join-users');
    if (notActive) {
      $this.find('span').text(joinIsActiveLang);
    } else {
      $this.find('span').text(joiningIsDisabledLang);
    }
    $this.toggleClass('dont-join-users');
    $this.prop('disabled', true);
    $.get("/panel/sessions/".concat(sessionId, "/toggleUsersJoinToAgora"), function (result) {
      if (result) {
        $.toast({
          heading: result.heading,
          text: result.text,
          bgColor: result.icon === 'error' ? '#f63c3c' : '#43d477',
          textColor: 'white',
          hideAfter: 10000,
          position: 'bottom-right',
          icon: result.icon
        });
      }
      $this.prop('disabled', false);
    });
  });
})(jQuery);
/******/ })()
;